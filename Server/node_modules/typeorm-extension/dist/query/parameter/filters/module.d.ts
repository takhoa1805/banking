import type { FiltersParseOutput } from 'rapiq';
import type { ObjectLiteral, SelectQueryBuilder, WhereExpressionBuilder } from 'typeorm';
import type { QueryFiltersApplyOptions, QueryFiltersApplyOutput, QueryFiltersOutput } from './type';
export declare function transformParsedFilters<T extends ObjectLiteral = ObjectLiteral>(data: FiltersParseOutput, options?: QueryFiltersApplyOptions<T>): QueryFiltersOutput;
/**
 * Apply transformed filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 */
export declare function applyFiltersTransformed<T extends ObjectLiteral = ObjectLiteral>(query: SelectQueryBuilder<T> | WhereExpressionBuilder, data: QueryFiltersOutput): QueryFiltersOutput;
/**
 * Apply parsed filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
export declare function applyQueryFiltersParseOutput<T extends ObjectLiteral = ObjectLiteral>(query: SelectQueryBuilder<T> | WhereExpressionBuilder, data: FiltersParseOutput, options?: QueryFiltersApplyOptions<T>): QueryFiltersApplyOutput;
/**
 * Apply raw filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
export declare function applyQueryFilters<T extends ObjectLiteral = ObjectLiteral>(query: SelectQueryBuilder<T>, data: unknown, options?: QueryFiltersApplyOptions<T>): QueryFiltersApplyOutput;
/**
 * Apply raw filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
export declare function applyFilters<T extends ObjectLiteral = ObjectLiteral>(query: SelectQueryBuilder<T>, data: unknown, options?: QueryFiltersApplyOptions<T>): QueryFiltersApplyOutput;
