"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var CassandraModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CassandraModule = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const cassandra_constants_1 = require("./cassandra.constants");
const cassandra_providers_1 = require("./cassandra.providers");
const cassandra_utils_1 = require("./cassandra.utils");
let CassandraModule = CassandraModule_1 = class CassandraModule {
    constructor(clientOptions, clientToken, moduleRef) {
        this.clientOptions = clientOptions;
        this.clientToken = clientToken;
        this.moduleRef = moduleRef;
    }
    static forRoot(options) {
        const token = (0, cassandra_utils_1.validateCassandraToken)(options.clientName);
        const tokenProvider = (0, cassandra_providers_1.createTokenProvider)(token);
        const optionsProvider = (0, cassandra_providers_1.createCassandraOptions)(options);
        const clientProvider = (0, cassandra_providers_1.createClientProvider)(token);
        return {
            global: (0, cassandra_utils_1.valueOrDefault)(options.isGlobal, true),
            module: CassandraModule_1,
            providers: [tokenProvider, optionsProvider, clientProvider],
            exports: [clientProvider],
        };
    }
    static forRootAsync(options) {
        const token = (0, cassandra_utils_1.validateCassandraToken)(options.clientName);
        const tokenProvider = (0, cassandra_providers_1.createTokenProvider)(token);
        const clientProvider = (0, cassandra_providers_1.createClientProvider)(token);
        const asyncProviders = (0, cassandra_providers_1.createCassandraAsyncProviders)(options);
        return {
            global: (0, cassandra_utils_1.valueOrDefault)(options.isGlobal, true),
            module: CassandraModule_1,
            imports: options.imports,
            providers: [tokenProvider, clientProvider, ...asyncProviders],
            exports: [clientProvider],
        };
    }
    async onApplicationShutdown() {
        const token = (0, cassandra_utils_1.createCassandraToken)(this.clientToken);
        const client = this.moduleRef.get(token);
        if (client) {
            if (this.clientOptions.beforeShutdown) {
                await this.clientOptions.beforeShutdown(client);
            }
            cassandra_utils_1.logger.log(`Closing Cassandra connection: ${this.clientToken}`);
            await (0, cassandra_utils_1.shutdownClient)(client);
        }
    }
};
exports.CassandraModule = CassandraModule;
exports.CassandraModule = CassandraModule = CassandraModule_1 = __decorate([
    (0, common_1.Module)({}),
    __param(0, (0, common_1.Inject)(cassandra_constants_1.CASSANDRA_OPTIONS)),
    __param(1, (0, common_1.Inject)(cassandra_constants_1.CASSANDRA_TOKEN)),
    __metadata("design:paramtypes", [Object, String, core_1.ModuleRef])
], CassandraModule);
//# sourceMappingURL=cassandra.module.js.map