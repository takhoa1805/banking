"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.valueOrDefault = exports.createCassandraToken = exports.shutdownClient = exports.createClient = exports.validateCassandraToken = exports.logger = void 0;
const common_1 = require("@nestjs/common");
const cassandra_driver_1 = require("cassandra-driver");
const cassandra_constants_1 = require("./cassandra.constants");
exports.logger = new common_1.Logger(cassandra_constants_1.CASSANDRA_CONTEXT);
const tokens = [];
function validateCassandraToken(token = cassandra_constants_1.CASSANDRA_DEFAULT_TOKEN) {
    if (tokens.includes(token)) {
        throw new Error(`Duplication error for clientName: ${token}`);
    }
    tokens.push(token);
    return token;
}
exports.validateCassandraToken = validateCassandraToken;
async function createClient(options) {
    const client = new cassandra_driver_1.Client(options);
    exports.logger.log('Cassandra client instance is ready');
    if (!options.noConnect) {
        await client.connect();
    }
    if (options.onReady) {
        await options.onReady(client);
    }
    return client;
}
exports.createClient = createClient;
async function shutdownClient(client) {
    await client.shutdown();
}
exports.shutdownClient = shutdownClient;
function createCassandraToken(token = cassandra_constants_1.CASSANDRA_DEFAULT_TOKEN) {
    return `${cassandra_constants_1.CASSANDRA_CLIENT}${token}`;
}
exports.createCassandraToken = createCassandraToken;
function valueOrDefault(value, defaultValue) {
    if (value === undefined) {
        return defaultValue;
    }
    return value;
}
exports.valueOrDefault = valueOrDefault;
//# sourceMappingURL=cassandra.utils.js.map